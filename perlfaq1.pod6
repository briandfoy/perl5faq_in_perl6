=begin pod

=head1 General Questions About Perl 6

=head2 What is Perl 6?

Perl 6 is a high-level, multi-paradigmic programming language. It
steals from Perl 5, Ruby, and several other languages. It's
object-oriented at its core, although that's not always apparent in
the program syntax. It supports concurrency, distributed programming,
grammars, mutable syntax, and many other advanced features. It can
load libraries from other languages and native libraries.

=head2 Who supports Perl 6? Who develops it? Why is it free?

So far, the general Perl 6 community supports the language. If you find
corporate technical support, send a pull request to update this answer!

You can see the list of contributors in the perl6 GitHub project
(https://github.com/orgs/perl6/people). This is an open source project
that's not controlled or owned by a particular entity. Larry Wall has
copyrights and trademarks for certain symbols associated with the language.

Why is it free? Why wouldn't it be? The original perlfaq started
before the term "open source" was even a thing. Most of the world has
caught up by now.

=head2 Which version of Perl 6 should I use?

The latest version! Perl 6 is in rapid development and is still evolving
in subtle ways.

But, you're probably wondering about what to pay attention to. Perl 6 is a
specification and can have many implementations. Unless you know which one
you want to play with (in which case you don't have this question), you
probably want Rakudo (http://www.rakudo.org), the implementation on top
of MOAR (http://www.moarvm.org) or the JVM.

=head2 What are Perl 4, Perl 5, or Perl 6?

Perl 4 was the version of the language that made Perl popular, back in
the 1990s.

Perl 5 was a complete rewrite that added modules, references, objects,
and eventually Unicode support. It's still currently developed and
supported. This is the version that most of the world still uses in
production.

Perl 6 was initially intended to be a Perl 5 replacement, landing
after Perl 5.6 or 5.8. But, Perl 5 development accelerated at the same
time. Now both are available. Perl 6 is a meta-object-based language
with Unicode at its core (rather than bolted on). It looks a little
like Perl 5, but has gone far beyond its ideas. "To Infinity and
Beyond!"

=head2 What is Perl 6?

This question is a placeholder. In the perlfaq, the first question in this
document was "What is Perl?", assuming Perl 5. In this translated version,
that moved to "What is Perl 6?". We leave this one here to preserve the
positions in this document.

=head2 How stable is Perl 6?

Perl 6 had its "Christmas release" in 2015. It's available for use, and
aside from minor bits, it's a mostly unchanging language. You may not want
to bet the farm on it yet.

The Perl 6 team has followed a strategy of getting things right and
making them faster later.

=head2 How often are new versions of Perl 6 released?

That depends on the implementation. The Rakudo compiler is released monthly
while Rakudo Star, the enhanced distribution with the compilar and extra
modules or tools, comes out at least quarterly.

=head2 Is Perl 6 difficult to learn?

It's not the easiest language to learn, but there's many powerful
features that make it worth the time. We're trying to make it easier to
learn.

=head2 How does Perl 6 compare with other languages like Java, Python, REXX, Scheme, or Tcl?

=head2 Can I do [task] in Perl 6?

Yes, except when you can't. Perl 6 is a high-level language with quite
a bit of flexibility. If you can't do it in pure Perl 6, you can load
foreign libraries from other languages, or native libraries from your
system, to get things done. This puts almost any task within reach.

That doesn't mean you should do it in Perl 6 just because you can.
There might be other ways that are easier or faster, but how you make
that decision depends on which things are important to you.

=head2 When shouldn't I program in Perl 6?

This answer depends on what's important to you and what you don't want
to give up. Perl 6 is still finding its legs, so you'll have to give
up a bit more care and effort compared to established languages.

If your program is already working in some other language, you don't
need to spend the time to make new bugs in another language. That's
good advice no matter the target language.

If you are developing medical equipment, avionics, or nuclear power
production controls, you probably want something else. And, you
probably already know that. That's caution is not special to Perl 6
though.

=head2 What's the difference between "perl6" and "Perl 6"?

It's a bit pedantic, but B<perl6> is the program and "Perl 6" is the
name of the language. The uppercase version takes about the
specification while the lowercase version is the thing that implements
it. Some people might even say "P6", to get rid of the confusion
around "Perl". Some people may refer to the particular implementation,
such as "Rakudo".

Some people like to write "PERL" because they think its an acronym (or
their caps lock is broken, or they're really excited all the time).
It's not. The initialism stuff came later.

=head2 What is a JAPH?

JAPH was a Perl 5 meme that stands for "Just another Perl hacker,". It's
not a thing in Perl 6.

Randal Schwartz used to sign email and usenet messages starting
in the late 1980s. He previously used the phrase with many subjects
("Just another x hacker,"), so to distinguish his JAPH, he started to
write them as Perl 5 programs:

    print "Just another Perl hacker,";

Other people picked up on this and started to write clever or
obfuscated programs to produce the same output, spinning things
quickly out of control while still providing hours of amusement for
their creators and readers.

CPAN has several JAPH programs at http://www.cpan.org/misc/japh.

=head2 How can I convince others to use Perl 6?

Make cool things! Make other people jealous that you can do something
better, faster, or cheaper than other languages. People often respond
better to what they get out of it. If you run into resistance, figure
out what those people get out of the other choice and how Perl might
satisfy that requirement.

Remember that Perl 6 might not be the right tool for every
job. You're a much better advocate if your claims are reasonable and
grounded in reality. Dogmatically advocating anything tends to make
people discount your message. Be honest about possible disadvantages
to your choice of Perl 6 since any choice has trade-offs.

=end pod

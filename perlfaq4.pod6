=begin pod

These questions come from the Perl 5 FAQ, but have Perl 6 answers. Often, the solutions in Perl 6 are much simpler because the Perl 5 way wasn't simple.

=head1 Data Manipulation

=head2 Numbers

=head3 Why am I getting long decimals (eg, 19.9499999999999) instead of the numbers I should be getting (eg, 19.95)?

This should be a rare problem in Perl 6. You normally see this when you rely on the native (binary) storage to represent a floating point number exactly.

Perl 6, however, delays floating point representations until as late as possible. It stores fractional numbers as the numerator and demoninator in the C<Rat> type:

	my $fraction = 1/137;
	put $fraction.^name;        # Rat
	put $fraction.numerator;    # 1
	put $fraction.denominator;  # 137

When you add to the C<Rat>, it adds fractions (possibly reducing them). The value remain exact within the precision of the numerator or denominator:

	$fraction += 5/9;
	put $fraction.numerator;    #  649
	put $fraction.denominator;  # 1233

If you need more precision, there's a C<FatRat> type.

=head3 Why is C<.Int> broken?

Most people think an integer method is broken because they give it imprecise numbers with rounding errors. Perl 6 generally does not have this problem. See "Why am I getting long decimals (eg, 19.9499999999999) instead of the numbers I should be getting (eg, 19.95)?"

=head3 Why isn't my octal data interpreted correctly?

=head3 Does Perl 6 have a C<round()> function? What about C<ceil()> and C<floor()>? Trig functions?

The L<round>, L<ceiling>, and L<floor> methods are in the L<Real> role (for those sorts of numbers) or in the L<Complex> class (for those numbers). You don't have to worry about what sort of number you have.

The L<Real.floor|> method returns the next lower integer. For negative numbers, the I<magnitude> of the number is actually I<lower>:

	( 1.5).floor   #  1
	(-1.5).floor   # -2
	<3/2>.floor    #  1

The L<Complex.floor|> method returns the next lower integer for both the real and imaginary parts separately:

	(1.2+8.2i).ceiling # 1+8i

The L<Real.ceiling|> method returns the next higher integer. For negative numbers, the I<magnitude> of the number is actually I<lower>:

	( 1.5).ceiling #  2
	(-1.5).ceiling # -1

The L<Complex.floor|> method returns the next higher integer for both the real and imaginary parts separately:

	(1.2+8.2i).ceiling # 2+9i

The L<round> method returns the closest integer (although that may not be what you need for sophisticated applications):

	(1.4).round      # 1
	<3/2>.round      # 2

The L<Complex.round|> method separately rounds the real and imaginary parts:

	(1.5-8.2i).round # 2-8i

For either version, you can give C<round> a precision:

	<1/137>.round: 1e-4; # 0.0073

=head3 How do I convert between numeric representations/bases/radixes?

If you have a number as a string and you want to turn it into a number, use C<.parse-base> with the radix you want:

	put "777".parse-base: 8;        # 511
	put "DEADBEEF".parse-base: 16;  # 3735928559
	put "1011011".parse-base: 2;    # 91

If you want to represent a number as a string in a certain base, use C<.base>:

	put 511.base: 8;          # "777"
	put 3735928559.base: 16;  # "DEADBEEF"
	put 91.base: 2;           # "1011011"

You might have to do both to get there:

	"777".parse-base(8).base: 3;  # 200221

=head3 Why doesn't & work the way I want it to?

If you're thinking about bit operators, then you're reading the right answer. In Perl 6, the C<&> is a junctive operator for C<all()> and not a bit operator:

	my $not-a-bit-mask = 1 & 3 & 7;
	put $not-a-bit-mask.perl;   # all( 1, 3, 7 )

The AND bitwise operator is now C<+&>:

	my $bit-mask = 0b1111_0101 +& 0b1010_0000;
	put $bit-mask.base: 2;      # 10100000

The OR bitwise operator is C<+|> and the XOR bitwise operator is C<+^>.

=head3 How do I multiply matrices?

=head3 How do I perform an operation on a series of integers?


=head3 How can I output Roman numerals?

=head3 Why aren't my random numbers random?

=head3 How do I get a random number between X and Y?

The L<Real.rand> method returns a number between zero and the number. Get a number between 0 and Y - X, then shift up X:

	my $X =  5;
	my $Y = 15;

	put $X + ($Y - $X).rand;

=head2 Dates

Most things that you want to do have methods in the L<Date> or L<DateTime> classes.

=head3 How do I find the day or week of the year?

Use the C<Date.day-of-year> method:

	Date.today.day-of-year

the week of the year is a bit trickier because the current week might belong to the previous year. The C<Date.week> method returns the year of the week and the week number:

	my ( $year, $week ) = Date.today.week;

=head3 How do I find the current century or millennium?

The L<Date.year> method will give you the year, which you can then manipulate that:

	(Date.today.year / 100 ).Int   # century

	(Date.today.year / 1000 ).Int   # millennium

If you'd like to include the year 2000 in the 20th century, that's going to be more work that you'll have to do yourself.

=head3 How can I compare two dates and find the difference?

=head3 How can I take a string and turn it into epoch seconds?

=head3 How can I find the Julian Day?

=head3 How do I find yesterday's date?

Use the C<Date.earlier> method to substract a time unit (in this case, a C<day>):

	Date.today.earlier( :1day )
	Date.today.earlier( day => 1 )   # same thing

There's also a C<Date.later> method to go in the other direction.

=head3 Does Perl 6 have a Year 2000 or 2038 problem? Is Perl 6 Y2K compliant?

Perl 6 is Y2K compliant. You might write a program that has a Y2K problem because you represent a year with two decimal digits, but that's not the language's fault. ;)

You can represent a date past 2038:

	my $far-off-date = Date.new: 2039, 12, 18;
	say $far-off-date;  # 2039-12-18

You can count the offset in days from the start of the Julian Calendar:

	my $date = Date.new-from-daycount: 65_789; # 2039-01-01

You can create an C<Instance> far in the future:

	Instant.from-posix( 2177500000 ).Date;     # 2039-01-01

=head2 Strings

=head3 How do I validate input?

=head3 How do I unescape a string?

=head3 How do I remove consecutive pairs of characters?

=head3 How do I find matching/nesting anything?

=head3 How do I reverse a string?

Use the C<Str.flip> method:

	"A man, a plan, a canal, Panama".flip;
		# amanaP ,lanac a ,nalp a ,nam A

=head3 How do I expand tabs in a string?

=head3 How do I reformat a paragraph?

=head3 How can I access or change N characters of a string?

=head3 How do I change the Nth occurrence of something?

=head3 How can I count the number of occurrences of a substring within a string?

=head3 How do I capitalize all the words on one line?

=head3 How can I split a [character]-delimited string except when inside [character]?

=head3 How do I strip blank space from the beginning/end of a string?

Use the C<Str.trim> method:

	"    Camelia   ".trim;  # 'Camelia'

=head3 How do I pad a string with blanks or pad a number with zeroes?

=head3 How do I find the soundex value of a string?

=head3 How can I expand variables in text strings?

=head3 What's wrong with always quoting "$vars"?

=head3 Why don't my C<<< <<HERE >>> documents work?

=head2 Lists and Arrays

=head3 What is the difference between a list and an array?

A C<List> is an immutable series of elements. An C<Array> is mutable, can constrain the types of elements, and itemizes each of its elements.

=head3 How can I tell whether a certain element is contained in a list or array?

Use C<List.first> to find the first matching element. This does not necessarily scan the entire list like C<List.grep> would:

	my @array = < a b c d e f 5 g h i j k >;

	put "Found an Int!" if @array.first: Int;

The matcher argument to C<.first> smart matches against each element of the list until if finds one that matches or it runs out of elements. It returns the element that successfully smart matched:

	my @array = < a b c d e f 5 g h i j k >;

	my $found = @array.first: *.fc gt 'C'.fc;
	put "Found $found" if $found;

=head3 How do I handle linked lists?

=head3 How do I handle circular lists?


=head2 Why is int() broken?

=head2 Why isn't my octal data interpreted correctly?

=head2 Does Perl 6 have a round() function? What about ceil() and floor()? Trig functions?

=head2 How do I convert between numeric representations/bases/radixes?

=head2 Why doesn't & work the way I want it to?

=head2 How do I multiply matrices?

=head2 How do I perform an operation on a series of integers?

=head2 How can I output Roman numerals?

=head2 Why aren't my random numbers random?

=head2 How do I get a random number between X and Y?

=head2 How do I find the day or week of the year?

=head2 How do I find the current century or millennium?

=head2 How can I compare two dates and find the difference?

=head2 How can I take a string and turn it into epoch seconds?

=head2 How can I find the Julian Day?

=head2 How do I find yesterday's date?

=head2 Does Perl 6 have a Year 2000 or 2038 problem? Is Perl 6 Y2K compliant?

=head2 How do I validate input?

=head2 How do I unescape a string?

=head2 How do I remove consecutive pairs of characters?

=head2 How do I expand function calls in a string?

=head2 How do I find matching/nesting anything?

=head2 How do I reverse a string?

=head2 How do I expand tabs in a string?

=head2 How do I reformat a paragraph?

=head2 How can I access or change N characters of a string?

=head2 How do I change the Nth occurrence of something?

=head2 How can I count the number of occurrences of a substring within a string?

=head2 How do I capitalize all the words on one line?

=head2 How can I split a [character]-delimited string except when inside [character]?

=head2 How do I strip blank space from the beginning/end of a string?

=head2 How do I pad a string with blanks or pad a number with zeroes?

=head2 How do I extract selected columns from a string?

=head2 How do I find the soundex value of a string?

=head2 How can I expand variables in text strings?

=head2 What's wrong with always quoting "$vars"?

=head2 Why don't my E<lt>E<lt>HERE documents work?

=head2 What is the difference between a list and an array?

=head2 What is the difference between $array[1] and @array[1]?

=head2 How can I remove duplicate elements from a list or array?

=head2 How can I tell whether a certain element is contained in a list or array?

=head2 How do I compute the difference of two arrays? How do I compute the intersection of two arrays?

=head2 How do I test whether two arrays or hashes are equal?

=head2 How do I find the first array element for which a condition is true?

=head2 How do I handle linked lists?

=head2 How do I handle circular lists?

=head2 How do I shuffle an array randomly?

=head2 How do I process/modify each element of an array?

=head2 How do I select a random element from an array?

=head2 How do I permute N elements of a list?

=head2 How do I sort an array by (anything)?

=head2 How do I manipulate arrays of bits?

=head2 Why does defined() return true on empty arrays and hashes?
=head2 Hashes

=head2 How do I process an entire hash?

=head2 How do I merge two hashes?

=head2 What happens if I add or remove keys from a hash while iterating over it?

=head2 How do I look up a hash element by value?

=head2 How can I know how many entries are in a hash?

=head2 How do I sort a hash (optionally by value instead of key)?

=head2 How can I always keep my hash sorted?

=head2 What's the difference between "delete" and "undef" with hashes?

=head2 Why don't my tied hashes make the defined/exists distinction?

=head2 How do I reset an C<each()> operation part-way through?

=head2 How can I get the unique keys from two hashes?

=head2 How can I store a multidimensional array in a DBM file?

=head2 How can I make my hash remember the order I put elements into it?

=head2 Why does passing a subroutine an undefined element in a hash create it?

=head2 How can I make the Perl 6 equivalent of a C structure/C++ class/hash or array of hashes or arrays?

=head2 How can I use a reference as a hash key?

=head2 How can I check if a key exists in a multilevel hash?

=head2 How can I prevent addition of unwanted keys into a hash?

=head2 How do I handle binary data correctly?

=head2 How do I determine whether a scalar is a number/whole/integer/float?

=head2 How do I keep persistent data across program calls?

=head2 How do I print out or copy a recursive data structure?

=head2 How do I define methods for every class/object?

=head2 How do I verify a credit card checksum?

=head2 How do I pack arrays of doubles or floats for XS code?

=end pod
